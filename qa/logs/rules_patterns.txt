21:    val keyCol = concat_ws("||", pkCols.map(col): _*)
22:    val acd = sample.agg(approx_count_distinct(keyCol).as("acd")).first().getLong(0)
28:  def segmentNulls(sample: DataFrame, colName: String, dims: Seq[String], threshold: Double, tableFqn: String): Seq[RuleResult] = {
31:      val by = sample.groupBy(col(d).as("segment")).agg((sum(when(col(colName).isNull, lit(1)).otherwise(lit(0))).cast("double") / count(lit(1)).cast("double")).as("null_rate"), count(lit(1)).as("rows")).na.fill(Map("segment" -> "<null>"))
33:        val seg = Option(r.getAs[Any]("segment")).map(_.toString).getOrElse("<null>")
34:        val rate = r.getAs[Double]("null_rate")
37:        RuleResult(s"null_rate_${colName}_by_$d", tableFqn, None, passed = pass, failRate = if (pass) 0.0 else rate, sampledRows = rows, severity = if (pass) "medium" else "high", examples = if (pass) Nil else Seq(seg), observed = Some(f"rate=$rate%.4f"), expected = Some(s"<= $threshold"))
