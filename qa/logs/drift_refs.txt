src/main/scala/bike/rapido/dq/drift/PSI.scala:3:object PSI { def psi(ref: Seq[Double], cur: Seq[Double]): Double = ref.zip(cur).map { case (p, q) => val pp = if (p <= 0) 1e-9 else p; val qq = if (q <= 0) 1e-9 else q; (pp - qq) * math.log(pp / qq) }.sum }
src/main/scala/bike/rapido/dq/drift/DriftRunner.scala:9:object DriftRunner {
src/main/scala/bike/rapido/dq/drift/DriftRunner.scala:18:    cutsOpt.map { cuts => val curHist = Histogram.histogram(sample.select(col(colName)), colName, cuts); val refHist = Histogram.histogram(refData(spark, tableFqn, partitionKeyOpt, refPartOpt.get).getOrElse(sample).select(col(colName)), colName, cuts); val score = PSI.psi(refHist.toSeq, curHist.toSeq); val severity = if (score >= psiThreshold) "high" else "medium"; DriftEvent(tableFqn, todayPartOpt, s"${colName}_psi_${if (minusDays == 1) "dod" else "wow"}", score, severity, reference = if (minusDays == 1) "yesterday" else "week") }
src/main/scala/bike/rapido/dq/EntryPoint.scala:4:import bike.rapido.dq.drift.{DriftRunner, DriftEvent}
src/main/scala/bike/rapido/dq/EntryPoint.scala:96:            val events = args.tables.flatMap { t => val evs = DriftRunner.run(spark, t, args.partitionKey, args.partitions, cols, bins = 10, psiThreshold = 0.2); evs.foreach(StdoutSink.print); evs }
